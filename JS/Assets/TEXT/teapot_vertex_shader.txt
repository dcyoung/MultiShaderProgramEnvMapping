uniform mat4 modelMatrix;       
uniform mat4 viewMatrix;        
uniform mat4 projectionMatrix; 
uniform mat3 normalMatrix; 

attribute vec2 aTexCoord; 
attribute vec4 aVertexPosition;   
//attribute vec4 aVertexColor; 
attribute vec3 aVertexNormal;

varying vec4 vColor;        
varying vec3 R; 

const float shininess = 32.0;


void main()
{               
	mat4 mvMatrix = viewMatrix * modelMatrix;    
    vec3 uLightPosition = (mvMatrix*vec4(-5,5,-5,1)).xyz;//vec3(-5, 5, -5);
	vec3 uAmbientLightColor = vec3(0.1,0.1,0.1);
    vec3 uDiffuseLightColor = vec3(1.0,0.5,0.0);
    vec3 uSpecularLightColor = vec3(0.0,0.0,0.0);
	
	vec4 vertexPositionEye4 = mvMatrix * aVertexPosition;
    vec3 vertexPositionEye3 = vertexPositionEye4.xyz / vertexPositionEye4.w;
	
	// Calculate the vector (l) to the light source
    vec3 vectorToLightSource = normalize(uLightPosition - vertexPositionEye3);
    //@dcyoung: changed to the following so that the point light would update with the terrain
    //vec3 tempLightPosition = (uMVMatrix * vec4(uLightPosition,1.0)).xyz;
    //vec3 vectorToLightSource = normalize(tempLightPosition - vertexPositionEye3);
	
	
	// Transform the normal (n) to eye coordinates
    vec3 normalEye = normalize(normalMatrix * aVertexNormal);
	
	// Calculate n dot l for diffuse lighting
    float diffuseLightWeightning = max(dot(normalEye, 
                                    vectorToLightSource), 0.0);
                                       
    // Calculate the reflection vector (r) that is needed for specular light
    vec3 reflectionVector = normalize(reflect(-vectorToLightSource, 
                                             normalEye));
    
    // The camera in eye coordinates is located in the origin and is pointing
    // along the negative z-axis. Calculate viewVector (v) 
    // in eye coordinates as:
    // (0.0, 0.0, 0.0) - vertexPositionEye3
    vec3 viewVectorEye = -normalize(vertexPositionEye3);
    
    float rdotv = max(dot(reflectionVector, viewVectorEye), 0.0);
    
    float specularLightWeightning = pow(rdotv, shininess);
	
	// Sum up all three reflection components and send to the fragment shader
    vColor = vec4((uAmbientLightColor
                + uDiffuseLightColor * diffuseLightWeightning
                + uSpecularLightColor * specularLightWeightning),1.0);
	
    gl_PointSize = 10.0;                    
    //vColor = aVertexColor;    
	gl_Position = projectionMatrix * viewMatrix * modelMatrix * aVertexPosition;
	
	
	R = reflect(vertexPositionEye4.xyz, normalEye.xyz);//(mvMatrix * vec4(reflect(vertexPositionEye4.xyz, normalEye.xyz),1)).xyz;
}                                       